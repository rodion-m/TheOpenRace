@page "/referee/distances/{distance:int}"
@using OpenRace.Data.Ef
@using System.Drawing
@using Coravel.Scheduling.Schedule.Interfaces
@using Microsoft.Extensions.Logging
@using NodaTime
@using OpenRace.Data
@using OpenRace.Entities
@using OpenRace.Features.RaceEvents

@inherits OpenRace.Features.Auth.ComponentBaseWithSession
@implements IDisposable

@inject NavigationManager NavigationManager
@inject AppConfig AppConfig
@inject MembersRepository MembersRepo
@inject RaceEventsDbRepository EventsRepo
@inject RaceEventsManager RaceEventsManager
@inject IScheduler Scheduler
@inject RaceEventsSubscriptionManager RaceEventsSubscriptionManager
@inject IToastService ToastService
@inject IClock Clock
@inject ILogger<DistanceRunners> Logger

<h1>Участники @Distance км.</h1>

@if (Session.IsAuthorized())
{
	if (_membersLaps != null)
	{
		//TODO здесь может быть поле ручного ввода номера участника
		var distanceColor = ColorTranslator.ToHtml(_distanceInfo.Color);
		<table style="border: 5px">
			<tr style="border: 5px">
				@foreach (var lap in _membersLaps)
				{
					var color = lap.IsNextLapReady && lap.IsCome ? distanceColor : ColorTranslator.ToHtml(Color.LightSlateGray);
					if (_buttonsLocked)
					{
						color = ColorTranslator.ToHtml(Color.DimGray);
					}
					<button class="btn" 
					        @ontouchstart="() => CompleteLap(lap, false)"
					        @onmousedown="() => CompleteLap(lap, false)"
					        style="background-color: @color; width: 70px; height: 70px; margin: 5px"
					        disabled="@_buttonsLocked"
					        >
						<span style="font-weight: bold; font-size: 150%">@(lap.MemberNumber)</span> <sup>⬤@(lap.NextLap)</sup>
					</button>
				}
			</tr>
		</table>
		<hr/>
		<hr/>
		<hr/>
		<hr/>
		<hr/>
		<hr/>
		<hr/>
		<hr/>
		<hr/>
		<hr/>
		<hr/>
		<hr/>
		<hr/>
		<button class="btn btn-danger" @onclick="CancelLastEvent"
		        style="width: 200px; height: 70px">
			Отменить последнее действие
		</button>
	}
	else
	{
		<div>Загрузка...</div>
	}
}
else
{
	<div>Требуется авторизация</div>
}

@code {
	[Parameter]
	public int Distance { get; set; }
	
	private List<MemberLap>? _membersLaps;
	
	private System.Threading.Timer? _timerUpdateRunners;
	private readonly Duration _timerUpdateRunnersInterval = Duration.FromSeconds(10);
	private bool _updating;
	private bool _disposed;
	private bool _buttonsLocked;

	private record MemberLap(int MemberNumber, int NextLap, Instant LastLapCompletedOn)
	{
		public bool IsCome { get; set; } //TODO убрать
		public bool IsNextLapReady { get; set; }
	}
	
	protected override async Task OnAuthorizedAsync()
	{
		await base.OnAuthorizedAsync();
		await UpdateRunners();

		SubscribeToEventsUpdate();
		CreateUpdateRunnersTimer();
	}
	
	private void CreateUpdateRunnersTimer()
	{
		_timerUpdateRunners = new System.Threading.Timer(_ =>
		{
			if (!_disposed && !_busy)
			{
				if (UpdateMembersReadiness())
				{
					if(!_disposed) InvokeAsync(StateHasChanged);
				}
			}
		}, null, _timerUpdateRunnersInterval.ToTimeSpan(), _timerUpdateRunnersInterval.ToTimeSpan());
	}

	private bool UpdateMembersReadiness()
	{
		if (_membersLaps == null) return false;
		var now = Clock.GetCurrentInstant();
		var readyLaps = _membersLaps.Where(it => now - it.LastLapCompletedOn >= AppConfig.MinLapDuration)
			.ToArray();
		if (readyLaps.Length != _membersLaps.Count(it => it.IsNextLapReady))
		{
			foreach (var lap in readyLaps)
			{
				lap.IsNextLapReady = true;
			}
			return true;
		}
		return false;
	}

	int _subscriptionId = -1;
	private void SubscribeToEventsUpdate()
	{
		_subscriptionId = RaceEventsSubscriptionManager.Subscribe(
			Distance, 
			EventAdded,
			EventDeleted,
			() =>
			{
				if(!_disposed) InvokeAsync(UpdateRunners);
			});
	}

	private void EventDeleted(RaceEvent @event)
	{
		if(_disposed) return;
		if(_membersLaps == null) return;
		if(@event.CreatorName == Session.UserName) return;
		if (_membersLaps.Any(it => it.MemberNumber == @event.MemberNumber))
		{
			if(!_disposed) InvokeAsync(UpdateRunners);
		}
	}
	private void EventAdded(RaceEvent @event)
	{
		if(_disposed) return;
		if(_membersLaps == null) return;
		if(@event.CreatorName == Session.UserName) return;
		if (_membersLaps.Any(it => it.MemberNumber == @event.MemberNumber))
		{
			if(!_disposed) InvokeAsync(UpdateRunners);
		}
	}
	
	private async Task UpdateRunners()
	{
		if (_updating) return;
		try
		{
			_updating = true;
			
			var events = await RaceEventsManager.GetRaceEvents(AppConfig.RaceId, Distance)
				.ToLookupAsync(it => it.MemberNumber);

			var newMembersLaps = events
				.Where(it => !it.Any(e => e.EventType == EventType.RaceFinished))
				.OrderBy(it => it.Key)
				//.OrderBy(it => it.Last().TimeStamp)
				.Select(CreateMemberLap)
				.ToList();
			
			SetNextLapReadiness(newMembersLaps);

			newMembersLaps = FilterNotComeRunners(newMembersLaps);
			
			if (!_disposed)
			{
				_membersLaps = newMembersLaps;
				StateHasChanged();
			}
		}
		finally
		{
			_updating = false;
		}
	}

	private MemberLap CreateMemberLap(IEnumerable<RaceEvent> memberEvents)
	{
		var events = memberEvents as RaceEvent[] ?? memberEvents.ToArray();
		var lapCount = events.Count(it => it.EventType == EventType.LapComplete);
		return new MemberLap(events[0].MemberNumber, lapCount + 1, events[^1].TimeStamp);
	}

	private void SetNextLapReadiness(IEnumerable<MemberLap> laps)
	{
		var now = Clock.GetCurrentInstant();
		foreach (var memberLap in laps)
		{
			memberLap.IsNextLapReady = now - memberLap.LastLapCompletedOn >= AppConfig.MinLapDuration;
		}
	}

	private static List<MemberLap> FilterNotComeRunners(List<MemberLap> members)
	{
		var maxLapsCompletedRightNow = members.Count > 0 ? members.Max(it => it.NextLap) - 1 : 0;
		bool IsCome(int lapCount)
		{
			if (lapCount > 0) return true;
			if (maxLapsCompletedRightNow < 2) return true;
			return false;
		}

		foreach (var lap in members)
		{
			lap.IsCome = IsCome(lap.NextLap - 1);
		}

		return members.OrderByDescending(it => it.IsCome).ToList();
	}

	private bool _busy;
	private AppConfig.DistanceInfo _distanceInfo => AppConfig.GetDistanceInfo(Distance);
	private async Task CompleteLap(MemberLap lapEvent, bool ignoreLapDurationChecking)
	{
		// Заметка. Проблему с отключением кнопки можно решать на клиенте через JS: https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/?view=aspnetcore-5.0
		if (!lapEvent.IsNextLapReady && !ignoreLapDurationChecking)
		{
			ToastService.ShowWarning("Если это ок, то нажмите здесь для подтверждения.", "Слишком быстрый круг!", 
				() => InvokeAsync(() => CompleteLap(lapEvent, true)));
			return;
		}
		if(CancelIfBusy()) return;
		try
		{
			var newLapEvent = new RaceEvent(
				Guid.NewGuid(), 
				AppConfig.RaceId, 
				lapEvent.MemberNumber, 
				EventType.LapComplete, 
				Clock.GetCurrentInstant(),
				Session.UserName,
				Distance
			);
			await RaceEventsManager.AddAsync(newLapEvent);
			var remainingLaps = _distanceInfo.LapsCount - lapEvent.NextLap;
			if (remainingLaps == 0)
			{
				await RaceEventsManager.AddAsync(new RaceEvent(
					Guid.NewGuid(), 
					AppConfig.RaceId, 
					lapEvent.MemberNumber, 
					EventType.RaceFinished, 
					Clock.GetCurrentInstant(),
					Session.UserName,
					Distance)
				);
			}
			UpdateMemberLapUi(newLapEvent);
		}
		catch(Exception e)
		{
			Logger.LogError(e, "Error while completing a lap");
		}
	}

	private void UpdateMemberLapUi(RaceEvent newLapEvent)
	{
		var index = _membersLaps!.FindIndex(it => it.MemberNumber == newLapEvent.MemberNumber);
		var memberLap = _membersLaps[index];
		var nextLap = memberLap.NextLap + 1;
		if (nextLap > _distanceInfo.LapsCount)
		{
			_membersLaps.RemoveAt(index); //TODO Не надо удалять. Нужно просто отключать и добавить кнопку "обновить порядок"
			ToastService.ShowSuccess($"Участник {newLapEvent.MemberNumber} завершил гонку!");
			StateHasChanged();
		}
		else
		{
			memberLap = new MemberLap(memberLap.MemberNumber, nextLap, newLapEvent.TimeStamp)
			{
				IsCome = true,
				IsNextLapReady = false
			};
			_membersLaps[index] = memberLap;
			StateHasChanged();
			//ToastService.ShowInfo($"Участник {memberNumber} пошел на {newLap}-й круг");
		}
	}

	private async Task CancelLastEvent()
	{
		if(CancelIfBusy()) return;
		try
		{
			_busy = true;
			ToastService.ShowWarning("Отмена последнего действия...");
			LockButtons();
			var @event = await RaceEventsManager.GetLastEventByCreatorOrNull(Session.UserName);
			if (@event == null || @event.EventType == EventType.RaceStarted)
			{
				ToastService.ShowError("Нет действий");
				return;
			}

			await RaceEventsManager.DeleteAsync(@event);
			if (@event.EventType == EventType.RaceFinished)
			{
				_busy = false;
				await CancelLastEvent();
				return;
			}
			_buttonsLocked = false;
			await UpdateRunners();
			ToastService.ShowSuccess($"Действие {@event.EventType} отменено для участника {@event.MemberNumber}");
		}
		catch
		{
			UnlockButtons();
			throw;
		}
		finally
		{
			_busy = false;
		}
	}

	private bool CancelIfBusy()
	{
		if (_busy)
		{
			ToastService.ShowWarning("Действие уже выполняется...");
			return true;
		}
		return false;
	}

	private void LockButtons()
	{
		_buttonsLocked = true;
		StateHasChanged();
	}
	
	private void UnlockButtons()
	{
		_buttonsLocked = false;
		StateHasChanged();
	}

	public void Dispose()
	{
		_disposed = true;
		_timerUpdateRunners?.Dispose();
		if (_subscriptionId != -1)
		{
			RaceEventsSubscriptionManager.Unsubscribe(Distance, _subscriptionId);
		}
	}
}