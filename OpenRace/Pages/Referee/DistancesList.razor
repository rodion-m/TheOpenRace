@page "/referee/distances"
@using OpenRace.Data.Ef
@using BlazorTable
@using System.Drawing
@using NodaTime
@using OpenRace.Entities

@inherits OpenRace.Features.Auth.ComponentBaseWithSession

@inject NavigationManager NavigationManager
@inject AppConfig AppConfig
@inject MembersRepository MembersRepo
@inject EventsDbRepository EventsRepo
@inject IToastService ToastService
@inject IClock Clock

@if (Session.IsAuthorized())
{
	if (Session.IsAdmin())
	{
		<h1>Управление забегом</h1>
		<table>
			<tr>
				<button class="btn btn-danger" @onclick="StartChildren" disabled="@IsDisabled" style="width: 300px; height: 100px">
					СТАРТ ДЕТЕЙ!
				</button>
			</tr>

			<hr/>
			<tr>
				<button class="btn btn-danger" @onclick="StartAdults" disabled="@IsDisabled" style="width: 300px; height: 100px">
					СТАРТ ВЗРОЛСЛЫХ!
				</button>
			</tr>
		</table>
		<hr/>
		<hr/>
		<hr/>
	}
	<h1>Список дистанций</h1>
	<table>
		@foreach (var distanceInfo in AppConfig.AvailableDistances)
		{
			var distance = distanceInfo.DistanceMt;
			var distanceS = $"{distance / 1000} км.";
			var color = ColorTranslator.ToHtml(distanceInfo.Color);
			<tr>
				<th>
					<button class="btn"
					        style="background-color: @color; width: 300px; height: 100px"
					        @onclick="() => OpenDistance(distance)">
						Судейство @distanceS
					</button>
				</th>
			</tr>
		}
	</table>

	if (Session.IsAdmin())
	{
		<hr/>
		<hr/>
		<hr/>
		<table>
			<tr>
				<button class="btn btn-dark" @onclick="RaceComplete" disabled="@IsDisabled" style="width: 300px; height: 100px">
					ЗАБЕГ ОКОНЧЕН
				</button>
			</tr>
			<hr/>
            <hr/>
			<hr/>
			<hr/>
			<hr/>
			<hr/>
			<hr/>
			<hr/>
			<hr/>
			<hr/>
			<hr/>
			<hr/>
			<tr>
				СТЕРЕТЬ ВСЕ ДАННЫЕ О ЗАБЕГЕ
				<button class="btn btn-danger" 
				        @onclick="ClearRace" disabled="@IsDisabled">
					ОБНУЛИТЬ ЗАБЕГ
				</button>
			</tr>
		</table>
	}
}
else
{
	<div>Требуется авторизация</div>
}

@code {
	public bool IsDisabled { get; set; }

	private void OpenDistance(int distance)
	{
		NavigationManager.NavigateTo(NavigationManager.Uri + $"/{distance}");
	}

	private async Task StartAdults()
	{
		IsDisabled = true;
		try
		{
			StateHasChanged();
			ToastService.ShowInfo("Запускаем взрослых...");
			var members = await MembersRepo.GetAdults().ToListAsync();
			await StartMembers(members);
		}
		finally
		{
			IsDisabled = false;
			StateHasChanged();
		}
	}

	private async Task StartChildren()
	{
		IsDisabled = true;
		try
		{
			StateHasChanged();
			ToastService.ShowInfo("Запускаем детей...");
			var members = await MembersRepo.GetChildren().ToListAsync();
			await StartMembers(members);
		}
		finally
		{
			IsDisabled = false;
			StateHasChanged();
		}
	}

	private async Task StartMembers(List<Member> members)
	{
		var now = Clock.GetCurrentInstant();
		var events = members.Select(member => new RaceEvent(
			Guid.NewGuid(), 
			AppConfig.RaceId, 
			member.Number.GetValueOrDefault(), 
			EventType.RaceStarted, 
			now, 
			Session.UserName, 
			member.Distance)
		);
		await EventsRepo.AddAll(events);
		ToastService.ShowSuccess($"Запущено бегунов: {members.Count}");
	}

	private async Task RaceComplete()
	{
		ToastService.ShowInfo("Завершение забега...");
		var events = await EventsRepo.GetRaceEvents(
			AppConfig.RaceId, EventType.RaceStarted, EventType.RaceFinished)
			.ToLookupAsync(it => it.MemberNumber);
		var now = Clock.GetCurrentInstant();
		var raceFinishedEvents = events.Where(it => !it.Any(e => e.EventType == EventType.RaceFinished))
			.Select(it => new RaceEvent(
				Guid.NewGuid(), 
				AppConfig.RaceId, 
				it.Key,
				EventType.RaceFinished, 
				now, 
				Session.UserName, 
				it.First().Distance
				)
			);
		await EventsRepo.AddAll(raceFinishedEvents);
		ToastService.ShowSuccess("Забег завершен!");
	}

	bool _clearRacePressed;
	private async Task ClearRace()
	{
		if (!_clearRacePressed)
		{
			ShowClearRaceToast();
			_clearRacePressed = true;
			return;
		}
		ToastService.ShowWarning("Обнуление забега...");
		await EventsRepo.DeleteEvents(AppConfig.RaceId);
		ToastService.ShowSuccess("Забег ОБНУЛЕН!");
	}

	private void ShowClearRaceToast()
	{
		ToastService.ShowWarning("Опасно! Нажмите еще раз по кнопке ОБНУЛИТЬ.");
	}

}