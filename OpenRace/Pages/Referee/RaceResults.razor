@page "/referee/results"
@using OpenRace.Data.Ef
@using System.Drawing
@using System.Globalization
@using BlazorDownloadFile
@using NodaTime
@using OpenRace.Entities
@using BlazorTable
@using MoreLinq
@using OpenRace.Features.RaceEvents

@inherits OpenRace.Features.Auth.ComponentBaseWithSession

@inject NavigationManager NavigationManager
@inject AppConfig AppConfig
@inject MembersRepository MembersRepo
@inject RaceEventsDbRepository EventsRepo
@inject IToastService ToastService
@inject IClock Clock
@inject RaceEventsFixer RaceEventsFixer
@inject IBlazorDownloadFileService BlazorDownloadFileService

<h1>Результаты забега</h1>

@if (Session.IsAuthorized())
{
	<EditForm Model="_filter" OnSubmit="UpdateFilter">
	<table>
		<tr>
			<td>Дистанция: </td>
			<td>
				<InputSelect class="form-control" @bind-Value="_filter.Distance">
					<option value="">Выбор</option>
					@foreach (var distanceInfo in AppConfig.AvailableDistances)
					{
						var distance = distanceInfo.DistanceMt;
						var distanceS = $"{distance / 1000} км.";
						<option value="@distance">@distanceS</option>
					}
				</InputSelect>
			</td>
		</tr>
		<tr>
			<td>Пол: </td>
			<td>
				<InputSelect class="form-control" @bind-Value="_filter.Gender">
					<option value="">Любой</option>
					<option value="@Gender.Male">Мужской</option>
					<option value="@Gender.Female">Женский</option>
				</InputSelect>
			</td>
		</tr>
		<tr>
			<td>Дети или взрослые: </td>
			<td>
				<InputSelect class="form-control" @bind-Value="_filter.Children">
					<option value="">Все</option>
					<option value="0">Только взрослые</option>
					<option value="1">Только дети</option>
				</InputSelect>
			</td>
		</tr>
		<tr><td colspan="2"><input class="btn btn-outline-info" type="submit" value="Показать"></td></tr>
	</table>
	</EditForm>
	if (results != null)
	{
		var distanceInfo = AppConfig.GetDistanceInfo(_filter.Distance!.Value);
		<button class="btn btn-outline-primary" @onclick="ExportResultsToCsv">Сохранить результаты в таблицу CSV</button>
		<h2>Итоги забега на @(distanceInfo.DistanceMt / 1000) км. (круги: @(distanceInfo.LapsCount))</h2>
		<Table TableItem="RaceResult" Items="results" PageSize="100" ColumnReorder="true">
			<Column TableItem="RaceResult" Title="Место" Field="@(x => x.Position!)" Sortable="true" Filterable="true" Width="5%"/>
			<Column TableItem="RaceResult" Title="Результат" Field="@(x => x.RaceTimeAsString)" Sortable="true" Filterable="true" Width="15%">
			</Column>
			<Column TableItem="RaceResult" Title="Луч. кр." Field="@(x => x.BestLapAsString)" Sortable="true" Filterable="true" Width="5%">
			</Column>
			<Column TableItem="RaceResult" Title="Ср. кр." Field="@(x => x.AverageLap!)" Sortable="true" Filterable="true" Width="10%">
				<Template>
					<span>@(context.AverageLap != null ? FormatDuration(context.AverageLap.Value) : "DNF")</span>
				</Template>
			</Column>
			<Column TableItem="RaceResult" Title="Худ. кр." Field="@(x => x.WorstLap!)" Sortable="true" Filterable="true" Width="10%">
				<Template>
					<span>@(context.WorstLap != null ? FormatDuration(context.WorstLap.Value) : "DNF")</span>
				</Template>
			</Column>
			<Column TableItem="RaceResult" Title="Зав. кругов" Field="@(x => x.FinishedLaps)" Sortable="true" Filterable="true" Width="10%"/>
			<Column TableItem="RaceResult" Title="Финиш" Field="@(x => x.FinishedLaps)" Sortable="true" Filterable="true" Width="10%">
				<Template>
					<span>@(context.IsAllLapsComplete ? "Да" : "Нет")</span>
				</Template>
			</Column>
			<Column TableItem="RaceResult" Title="Имя" Field="@(x => x.Member.FullName)" Sortable="true" Filterable="true" Width="20%"/>
			<Column TableItem="RaceResult" Title="№" Field="@(x => x.Member.Number!)" Sortable="true" Filterable="true" Width="5%"/>
			<Column TableItem="RaceResult" Title="Возраст" Field="@(x => x.Member.Age)" Sortable="true" Filterable="true" Width="5%"/>
			<Column TableItem="RaceResult" Title="Пол" Field="@(x => x.Member.Gender)" Sortable="true" Filterable="true" Width="5%">
				<Template>
					@{
						var gen = context.Member.Gender == Gender.Male ? "М" : "Ж";
						<span>@gen</span>
					}
				</Template>
			</Column>
			<Pager ShowPageNumber="true" ShowTotalCount="true"/>
		</Table>
	}
}
else
{
	<div>Требуется авторизация</div>
}

@code {
	private ResultsFilter _filter { get; set; } = new ResultsFilter(null, null, null);
	List<RaceResult>? results;

	private record ResultsFilter
	{
		public ResultsFilter(int? distance, Gender? gender, int? children)
		{
			Distance = distance;
			Gender = gender;
			Children = children;
		}

		public int? Distance { get; set; }
		public Gender? Gender { get; set; }
		public int? Children { get; set; }

		public void Deconstruct(out int? distance, out Gender? gender, out int? children)
		{
			distance = Distance;
			gender = Gender;
			children = Children;
		}
	}

	public record RaceResult(
		Member Member,
		int Distance,
		Duration? RaceTime,
		int FinishedLaps, 
		int TotalLaps, 
		Duration? BestLap, 
		Duration? WorstLap, 
		Duration? AverageLap, 
		Instant StartedAt,
		Instant? FinishedAt
	)
	{
		public bool IsAllLapsComplete => FinishedLaps >= TotalLaps;
		public int? Position { get; set; }
		public string RaceTimeAsString
		{
			get
			{
				if (RaceTime == null) return "DNF";
				if (IsAllLapsComplete) return FormatDuration(RaceTime.Value);
				return $"{FormatDuration(RaceTime.Value)} DNF";
			}
		}
		
		public string BestLapAsString
		{
			get
			{
				if (BestLap == null) return "DNF";
				return FormatDuration(BestLap.Value);
			}
		}
	}

	protected override async Task OnAuthorizedAsync()
	{
		await base.OnAuthorizedAsync();
	}

	private async Task UpdateFilter()
	{
		var (distance, gender, children) = _filter;
		if (distance == null)
		{
			results = null;
			ToastService.ShowError("Выберите дистанцию");
			StateHasChanged();
			return;
		}
		ToastService.ShowInfo("Загрузка...");
		var events = await EventsRepo.GetMemberAndEvents(
			AppConfig.RaceId, distance.Value, gender, children == null ? null : children == 1);
		results = events
			.Select(memberEvents => CreateRaceResult(memberEvents.Key, memberEvents.Value))
			.OrderByDescending(it => Math.Min(it.FinishedLaps, it.TotalLaps)) //TODO fix
			.ThenBy(it => it.RaceTime)
			.ToList();
		for (var i = 0; i < results.Count; i++) results[i].Position = i + 1;

		// await RaceEventsFixer.RemoveBadLaps(AppConfig.RaceId, distance.Value, AppConfig.MinLapDuration);
		// await RaceEventsFixer.AddExtraAverageLaps(AppConfig.RaceId, results);
		
		StateHasChanged();
	}

	private RaceResult CreateRaceResult(Member member, RaceEvent[] events)
	{
		//Console.WriteLine(string.Join('\n', events.Select(it => it.ToString())));
		var raceStarted = events.Single(it => it.EventType == EventType.RaceStarted);
		var laps = new List<(RaceEvent @event, Duration duration)>(events.Length);
		for (var i = 1; i < events.Length; i++)
		{
			var @event = events[i];
			if(@event.EventType == EventType.RaceFinished) break;
			laps.Add((@event, @event.TimeStamp - events[i - 1].TimeStamp));
		}
		//Берем за финиш время последнего круга
		RaceEvent? raceFinished = null;
		Duration? bestLap = null, worstLap = null, averageLap = null;
		if (laps.Any())
		{
			raceFinished = laps[^1].@event;
			bestLap = laps.Min(it => it.duration);
			worstLap = laps.Max(it => it.duration);
			averageLap = Duration.FromTicks(laps.Average(it => it.duration.TotalTicks));
		}
		return new RaceResult(
			member,
			_filter.Distance!.Value,
			raceFinished?.TimeStamp - raceStarted.TimeStamp,
			events.Count(it => it.EventType == EventType.LapComplete),
			AppConfig.GetDistanceInfo(raceStarted.Distance).LapsCount,
			bestLap,
			worstLap,
			averageLap,
			raceStarted.TimeStamp,
			raceFinished?.TimeStamp
		);
	}

	public static string FormatDuration(Duration duration)
	{
		return duration.ToString("hh:mm:ss", CultureInfo.InvariantCulture);
	}

	private async Task ExportResultsToCsv()
	{
		if (results == null) throw new NullReferenceException(nameof(results));
		string childrenRu = _filter.Children switch {
			0 => "взрослые",
			1 => "дети",
			_ => "все"
		};
		string genderRu = _filter.Gender switch {
			Gender.Male => "М",
			Gender.Female => "Ж",
			_ => "МЖ"
		};
		var fileName = $"results_{_filter.Distance}m_{genderRu}_{childrenRu}.csv".ToLower();
		var headers = new[] { "Место", "Имя", "Результат", "Луч. круг", "№", "Пол" };
		var values = results.Select(it => new []
		{
			it.Position.ToString(), it.Member.FullName.Trim(), it.RaceTimeAsString, it.BestLapAsString, it.Member.Number?.ToString(), it.Member.Gender == Gender.Male ? "М" : "Ж"
		});
		var csv = new[] {headers}.Concat(values)
			.Select(it => string.Join(',', it))
			.ToDelimitedString("\r\n");
		await BlazorDownloadFileService.DownloadFileFromText(fileName, csv, "text/plain");
	}

}