@page "/referee/results"
@using OpenRace.Data.Ef
@using System.Drawing
@using NodaTime
@using OpenRace.Entities

@inherits OpenRace.Features.Auth.ComponentBaseWithSession

@inject NavigationManager NavigationManager
@inject AppConfig AppConfig
@inject MembersRepository MembersRepo
@inject EventsRepository EventsRepo
@inject IToastService ToastService
@inject IClock Clock

<h1>Результаты забега</h1>

@if (Session.IsAuthorized())
{
	<table>
		<tr>
			<td>Дистанция: </td>
			<td>
				<InputSelect @bind-Value="_filter.Distance" @onchange="UpdateFilter">
					<option value="">Выбрать</option>
					@foreach (var distanceInfo in AppConfig.AvailableDistances)
					{
						var distance = distanceInfo.DistanceMt;
						var distanceS = $"{distance / 1000} км.";
						<option value="@distance">@distanceS</option>
					}
				</InputSelect>
			</td>
		</tr>
		<tr>
			<td>Пол: </td>
			<td>
				<InputSelect @bind-Value="_filter.Gender" @onchange="UpdateFilter">
					<option value="">Любой</option>
					<option value="@Gender.Male">Мужской</option>
					<option value="@Gender.Female">Женский</option>
				</InputSelect>
			</td>
		</tr>
		<tr>
			<td>Дети или взрослые: </td>
			<td>
				<InputSelect @bind-Value="_filter.Gender" @onchange="UpdateFilter">
					<option value="">Все</option>
					<option value="false">Только взрослые</option>
					<option value="@Gender.Female">Только дети</option>
				</InputSelect>
			</td>
		</tr>
	</table>
	if (results != null)
	{
		//TODO statistics
	}
	else
	{
		<div>Выберите дистанцию</div>
	}
}
else
{
	<div>Требуется авторизация</div>
}

@code {
	private ResultsFilter _filter { get; set; } = new ResultsFilter(null, null, null);
	List<RaceResult>? results;

	private record ResultsFilter
	{
		public ResultsFilter(int? distance, Gender? gender, bool? children)
		{
			Distance = distance;
			Gender = gender;
			Children = children;
		}

		public int? Distance { get; set; }
		public Gender? Gender { get; set; }
		public bool? Children { get; set; }

		public void Deconstruct(out int? distance, out Gender? gender, out bool? children)
		{
			distance = Distance;
			gender = Gender;
			children = Children;
		}
	}

	private record RaceResult(
		Member Member, Duration RaceTime, int FinishedLaps, int TotalLaps, Duration BestLap)
	{
		public bool IsAllLapsComplete => FinishedLaps == TotalLaps;
	}

	protected override async Task OnAuthorizedAsync()
	{
		await base.OnAuthorizedAsync();
	}

	private async Task UpdateFilter()
	{
		var (distance, gender, children) = _filter;
		if (distance == null)
		{
			results = null;
			ToastService.ShowError("Выберите дистанцию");
			StateHasChanged();
			return;
		}
		var events = await EventsRepo.GetMemberAndEvents(AppConfig.RaceId, distance.Value, gender, children);
		results = events.Select(memberEvents => CreateRaceResult(memberEvents.Key, memberEvents.Value))
			.OrderByDescending(it => it.FinishedLaps)
			.ThenBy(it => it.RaceTime)
			.ThenBy(it => it.BestLap)
			.ToList();
		
		StateHasChanged();
	}

	private RaceResult CreateRaceResult(Member member, RaceEvent[] events)
	{
		var raceStarted = events.Single(it => it.EventType == EventType.RaceStarted);
		var raceFinished = events.Single(it => it.EventType == EventType.RaceFinished);
		var calculatedLaps = events
			.Where(it => it.EventType is EventType.LapComplete or EventType.RaceStarted)
			.OrderBy(it => it.TimeStamp)
			.Aggregate(new List<(RaceEvent @event, Duration? duration)>(), //TODO foreach!
				(list, @event) =>
				{
					list.Add((@event, @event.TimeStamp - list.LastOrDefault().@event.TimeStamp));
					return list;
				});
		var bestLap = calculatedLaps.Where(it => it.duration != null).Min(it => it.duration!.Value);
		return new RaceResult(
			member, 
			raceFinished.TimeStamp - raceStarted.TimeStamp, 
			events.Count(it => it.EventType == EventType.LapComplete),
			AppConfig.GetDistanceInfo(raceStarted.Distance).LapsCount,
			bestLap
		);
	}


}