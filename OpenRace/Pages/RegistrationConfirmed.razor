@page "/confirmed/{id}"

@using OpenRace.Entities
@using OpenRace.Data.Ef

@inherits OpenRace.Features.Auth.ComponentBaseWithSession

@inject NavigationManager NavigationManager
@inject AppConfig AppConfig
@inject MembersRepository _membersRepo

<h1>Участие в забеге</h1>

@if (ErrorText == null)
{
	if (_member == null)
	{
		<div>Загрузка...</div>
	}
	else
	{
		<h2 style="color: green">Участие в забеге подтверждено!</h2>
		<h3>Вы бежите под номером: <strong>@(_member.Number)</strong></h3>
		<h3>Дистанция: @(_member.DistanceAsStringRu)</h3>
		if (SessionService.IsAuthorized())
		{
			<button class="btn btn-primary" @onclick="OpenRegistration">Зарегистрировать еще</button>
		}
		else
		{
			<button class="btn btn-primary" @onclick="OpenSite">Вернуться на сайт</button>
		}
	}
}
else
{
	<h2 style="color: red">Ошибка: @ErrorText</h2>
}

@code {

	[Parameter]
	public string? Id { get; init; }

	public string? ErrorText { get; set; }
	private Member? _member;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (!firstRender) return;
		if (Id != null)
		{
			if (Guid.TryParse(Id, out var memberId))
			{
				_member = await _membersRepo.GetByIdOrNull(memberId);
				if (_member == null)
				{
					ErrorText = $"Участник не найден: {Id}";
				}
			}
			else
			{
				ErrorText = $"Некорректное значение: {Id}";
			}
		}
		else
		{
			ErrorText = "Id участника не задан";
		}
		StateHasChanged();
	}

	void OpenRegistration() => NavigationManager.NavigateTo($"{NavigationManager.BaseUri}{RegistrationForm.Identifier}");
	void OpenSite() => NavigationManager.NavigateTo(AppConfig.SiteUrl);

}