@page "/registration"
@using Microsoft.Extensions.Logging
@using OpenRace.Features.Registration
@using System.Globalization

@inherits OpenRace.Features.Auth.ComponentBaseWithSession

@inject AppConfig AppConfig
@inject NavigationManager NavigationManager
@inject RegistrationService RegistrationService
@inject ILogger<RegistrationForm> Logger
@inject IToastService ToastService

<h2>Регистрация на забег в поддержку детей нуждающихся в лечении</h2>
<h5>ПО ВСЕМ ВОПРОСАМ ОБРАЩАТЬСЯ ПО ТЕЛЕФОНУ: <a href="tel:+79645522761">8-964-552-27-61</a> Дмитрий</h5>
@if (SessionService.IsAuthorized())
{
	<EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
		<DataAnnotationsValidator/>
		<table>
			<tr>
				<td>Имя:</td>
				<td>
					<InputText class="form-control" @bind-Value="model.FirstName"></InputText>
				</td>
			</tr>
			<tr>
				<td>Фамилия:</td>
				<td>
					<InputText class="form-control" @bind-Value="model.LastName"></InputText>
				</td>
			</tr>
			<tr>
				<td>Отчество:</td>
				<td>
					<InputText class="form-control" @bind-Value="model.PatronymicName"></InputText>
				</td>
			</tr>
			<tr>
				<td>Возраст:</td>
				<td>
					<InputNumber class="form-control" @bind-Value="model.Age"></InputNumber>
				</td>
			</tr>
			<tr>
				<td>Пол:</td>
				<td>
					<InputSelect class="form-control" @bind-Value="model.Gender">
						<option value="">Выбор</option>
						<option value="Male">Мужской</option>
						<option value="Female">Женский</option>
					</InputSelect>
				</td>
			</tr>
			<tr>
				<td>Email:</td>
				<td>
					<InputText class="form-control" @bind-Value="model.Email"></InputText>
				</td>
			</tr>
			<tr>
				<td>Телефон:</td>
				<td>
					<InputText class="form-control" @bind-Value="model.Phone"></InputText>
				</td>
			</tr>
			<tr>
				<td>Дистанция:</td>
				<td>
					<InputSelect class="form-control" @bind-Value="model.DistanceMt">
						<option value="">Выбор</option>
						@foreach (var distanceInfo in AppConfig.AvailableDistances)
						{
							<option value="@(distanceInfo.DistanceMt)" class="form-control">@(distanceInfo.Name)</option>
						}
					</InputSelect>
				</td>
			</tr>
			<tr>
            	<td>Сумма пожертвования:</td>
            	<td>
            		<InputText class="form-control" @bind-Value="model.Donation"></InputText>
            	</td>
            </tr>
			<tr>
				<td colspan="2"><ValidationSummary/></td>
			</tr>
			<tr>
				<input class="btn btn-outline-primary" type="submit" value="Зарегистрироваться">
			</tr>
		</table>
	</EditForm>
}
else
{
	<button class="btn btn-primary" @onclick="OpenSite">Вернуться на сайт</button>
}

@code {
	public const string Identifier = "registration";
	private readonly RegistrationModel model = new();

	private bool _busy;
	private async Task HandleValidSubmit()
	{
		if(_busy) return;
		try
		{
			_busy = true;
			ToastService.ShowInfo("Регистрация...");
			if (SessionService.IsAuthorized())
			{
				model.RegisteredBy = Account.UserName;
			}
			var redirectUri = await RegistrationService.RegisterOrUpdate(model);
			NavigationManager.NavigateTo(redirectUri.ToString());
		}
		finally
		{
			_busy = false;
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (!SessionService.IsAuthorized())
		{
			OpenSite();
		}
	}

	void OpenSite() => NavigationManager.NavigateTo(AppConfig.SiteUrl);
}