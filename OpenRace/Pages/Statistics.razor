@page "/statistics"

@using OpenRace.Features.Payment
@using OpenRace.Entities
@using OpenRace.Data.Ef
@using OpenRace.Features.Registration
@using BlazorTable
@using System.Drawing
@using System.Text
@using BlazorDownloadFile
@using OpenRace.Extensions
@using OpenRace.Helpers

@inherits OpenRace.Features.Auth.ComponentBaseWithSession

@inject NavigationManager NavigationManager
@inject AppConfig AppConfig
@inject MembersRepository MembersRepo
@inject IBlazorDownloadFileService BlazorDownloadFileService

<h1>Статистика</h1>

@if (Session.IsAdmin())
{
	if (_statisticsData is { } data)
	{
		<table class="table table-bordered">
			<thead>
			<tr>
				<th scope="col">Дистанция</th>
				<th scope="col">Все</th>
				<th scope="col">Взрослые</th>
				<th scope="col">Дети</th>
				<th scope="col">Мужчины</th>
				<th scope="col">Женщины</th>
				<th scope="col">Мальчики</th>
				<th scope="col">Девочки</th>
			</tr>
			</thead>
			<tbody>
			@* ReSharper disable once RedundantEnumerableCastCall *@
			@foreach (var distanceInfo in AppConfig.AvailableDistances.Cast<AppConfig.DistanceInfo?>().Append(null))
			{
				var distance = distanceInfo?.DistanceMt;
				var distanceS = distance != null ? $"{distance / 1000} км." : "Всего";
				var color = ColorTranslator.ToHtml(distanceInfo?.Color ?? Color.White);
				<tr>
					<th scope="row" style="background-color: @color">@distanceS</th>
					<td>@data.Count(distance)</td>
					<td>@data.Count(distance, children: false)</td>
					<td>@data.Count(distance, children: true)</td>
					<td>@data.Count(distance, Gender.Male, children: false)</td>
					<td>@data.Count(distance, Gender.Female, children: false)</td>
					<td>@data.Count(distance, Gender.Male, true)</td>
					<td>@data.Count(distance, Gender.Female, true)</td>
				</tr>
			}
			</tbody>
		</table>
		<h3>
			Всего участников:
			@data.AllMembers.Count
		</h3>
		<hr/>
		<h2>Список участников</h2>
		<button class="btn btn-primary" @onclick="DownloadManyAsCsv">Скачать все в формате CSV</button>
		<button class="btn btn-primary" @onclick="DownloadAllAsCsv">Скачать все в формате CSV ОДНИМ файлом</button>
		<Table TableItem="Member" Items="data.AllMembers" PageSize="15" ColumnReorder="true">
			<Column TableItem="Member" Title="№" Field="@(x => x.Number!)" Sortable="true" Filterable="true" Width="5%"/>
			<Column TableItem="Member" Title="Имя" Field="@(x => x.FullName)" Sortable="true" Filterable="true" Width="30%"/>
			<Column TableItem="Member" Title="Email" Field="@(x => x.Email!)" Sortable="true" Filterable="true" Width="20%">
				<Template>
					<a href="mailto:@context.Email">@context.Email</a>
				</Template>
			</Column>
			<Column TableItem="Member" Title="Телефон" Field="@(x => x.Phone!)" Sortable="true" Filterable="true" Width="20%">
				<Template>
					<a href="tel:@context.Phone">@context.Phone</a>
				</Template>
			</Column>
			<Column TableItem="Member" Title="Дистанция (км)" Field="@(x => x.Distance)" Sortable="true" Filterable="true" Width="10%" Format="N0">
				<Template>
					<span>@(context.DistanceInKm)</span>
				</Template>
			</Column>
			<Column TableItem="Member" Title="Возраст" Field="@(x => x.Age)" Sortable="true" Filterable="true" Width="10%"/>
			<Column TableItem="Member" Title="Пол" Field="@(x => x.Gender)" Sortable="true" Filterable="true" Width="5%">
				<Template>
					@{
						var gen = context.Gender == Gender.Male ? "М" : "Ж";
						<span>@gen</span>
					}
				</Template>
			</Column>
			<Pager ShowPageNumber="true" ShowTotalCount="true"/>
		</Table>
	}
	else
	{
		<div>Загрузка...</div>
	}
}
else
{
	<div>Требуется авторизация</div>
}

@code {

	private record StatisticsData(List<Member> AllMembers)
	{
		public int Count(int? distance, Gender? gender = null, bool? children = null)
		{
			return AllMembers.Count(it => it.Number != null
			                              && (distance == null || it.Distance == distance)
			                              && (gender == null || it.Gender == gender)
			                              && (children == null || it.IsChild() == children)
				);
		}
	}

	StatisticsData? _statisticsData;

	protected override async Task OnAuthorizedAsync()
	{
		await base.OnAuthorizedAsync();
		var members = await MembersRepo.AllAsync()
			.OrderByDescending(it => it.Number)
			.ThenByDescending(it => it.CreatedAt)
			.ToListAsync();
		_statisticsData = new StatisticsData(members);
		StateHasChanged();
	}

	private async Task DownloadManyAsCsv()
	{
		var files = _statisticsData!.AllMembers
			.Where(it => it.Number is not null)
			.OrderBy(it => it.Number)
			.GroupBy(it => it.Distance)
			.Select(group =>
			{
				var distance = group.Key;
				var rows = group.Select(it =>
					new string[]
					{
						it.Number.ToString()!, it.FullName.Trim(), it.Distance.ToString(),
						it.Gender == Gender.Male ? "М" : "Ж"
					});
				return new { Distance = distance, Rows = rows};
			});
		
		foreach (var file in files)
		{
			var csv = TinyCsvHelper.CreateCsvContent(null, file.Rows);
			await BlazorDownloadFileService.DownloadFileFromText(
				$"zabeg_{file.Distance}.csv", csv, Encoding.UTF8, "text/csv", true);
		}
	}

	
	private async Task DownloadAllAsCsv()
	{
		var rows = _statisticsData!.AllMembers
			.Where(it => it.Number is not null)
			.OrderBy(it => it.Number)
			.Select(it => new string[]
			{
				it.Number.ToString()!, it.FullName.Trim(), it.Distance.ToString(),
				it.Phone ?? "", it.Email ?? "", it.Region ?? "", it.District ?? "", it.Age.ToString()
			});
		var csv = TinyCsvHelper.CreateCsvContent(null, rows);
		await BlazorDownloadFileService.DownloadFileFromText("zabeg.csv", csv, Encoding.UTF8, "text/plain");
	}

}