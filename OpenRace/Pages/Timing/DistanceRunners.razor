@page "/distances/{distance:int}"
@using OpenRace.Data.Ef
@using System.Drawing
@using OpenRace.Entities

@inherits OpenRace.Features.Auth.ComponentBaseWithSession

@inject NavigationManager NavigationManager
@inject AppConfig AppConfig
@inject MembersRepository MembersRepo
@inject EventsRepository EventsRepo
@inject IToastService ToastService

<h1>Бегуны</h1>

@if (Session.IsAuthorized())
{
	if (_memberLaps != null)
	{
		var hMemberCount = 8;
		var offset = 0;
		<table style="border: 5px">
			@for (var members = _memberLaps.Take(hMemberCount); 
            	members.Any(); 
            	members = _memberLaps.Skip(offset).Take(hMemberCount))
            {
            	offset += hMemberCount;
	            <tr style="border: 5px">
		            @foreach (var (number, lap) in members)
		            {
			            <button class="btn btn-dark" @onclick="() => LapComplete(number, lap)"
			                    style="width: 100px; height: 70px; margin: 5px">
				            <span style="font-weight: bold; font-size: 200%">@number</span> <sup>⬤@lap</sup>
			            </button>
		            }
	            </tr>
            }
		</table>
	}
	else
	{
		<div>Загрузка...</div>
	}
}
else
{
	<div>Требуется авторизация</div>
}

@code {
	[Parameter]
	public int Distance { get; set; }

	private List<MemberLap>? _memberLaps;

	private record MemberLap(int MemberNumber, int Lap);
	
	protected override async Task OnAuthorizedAsync()
	{
		await base.OnAuthorizedAsync();
		await UpdateRunners();
	}

	private async Task UpdateRunners()
	{
		var events = await EventsRepo.GetRaceEvents(AppConfig.RaceId, Distance)
			.ToLookupAsync(it => it.MemberNumber);
		_memberLaps = events.Select(e =>
		{
			var lapCount = e.Count(it => it.EventType == EventType.LapComplete) + 1;
			return new MemberLap(e.Key, lapCount);
		}).ToList();
		
		StateHasChanged();
	}

	private Task LapComplete(int number, int lap)
	{
		throw new NotImplementedException();
	}

}